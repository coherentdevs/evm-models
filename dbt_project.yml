
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'coherent_dbts'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'coherent_dbts'

# default variable names if no vars are passed into the dbt run command
vars:
  raw_database: "ethereum_raw_data"
  source_table_transactions: "transactions"
  source_table_traces: "traces"
  source_table_blocks: "blocks"
  source_table_logs: "logs"
  contracts_database: "evm_contract_fragments_data"
  raw_schema: "raw"
  contracts_schema: "evm"
  decoded_database: "ethereum_decoded_data"
  decoded_schema: "decoded"
  decoded_table_transactions: "decoded_transactions"
  decoded_table_traces: "decoded_traces"
  decoded_table_blocks: "decoded_blocks"
  decoded_table_logs: "decoded_logs"
  backfill: False


# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  coherent_dbts:
    # Config indicated by + and applies to all files under models/example/

on-run-start:
  - "{{ create_udfs() }}"

